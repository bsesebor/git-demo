CREATE TABLE IF NOT EXISTS "courses"(
"courseId" SERIAL,
"courseName" VARCHAR(120) NOT NULL,
CONSTRAINT "courses_pk" PRIMARY KEY ("courseId")
);


SELECT * FROM "courses";

CREATE TABLE "students"(
"studentId" SERIAL,
"courseId" INT NOT NULL,
"studentName" VARCHAR(120) NOT NULL,
"studentEmail" VARCHAR(120) UNIQUE NOT NULL,
"studentPhone" INT NOT NULL,
CONSTRAINT "student_pk" PRIMARY KEY ("studentId"),
CONSTRAINT "courses_students_fk" FOREIGN KEY ("courseId")	
	REFERENCES "courses" ("courseId")
	ON UPDATE NO ACTION
	ON DELETE NO ACTION
	NOT VALID
	
);



SELECT * FROM "students";

INSERT INTO "courses"("courseName")
VALUES ('Web Development');

INSERT INTO "students"("courseId","studentName","studentEmail","studentPhone")
VALUES (1, 'John Doe','john@doe.com', 10001);

INSERT INTO "students"("courseId","studentName","studentEmail","studentPhone")
VALUES(1, 'BB', 'b@b.com', 20002),
(1, 'CC', 'c@c.com', 30003),
(1, 'DD', 'd@d.com', 40004),
(1, 'EE', 'e@e.com', 50005),
(1, 'FF', 'f@f.com', 60006),
(1, 'GG', 'g@g.com', 70007),
(1, 'HH', 'h@h.com', 80008),
(1, 'II', 'i@i.com', 90009),
(1, 'JJ', 'j@j.com', 10010);

SELECT * FROM "students" WHERE "studentId" = 5;
SELECT * FROM "students" WHERE "studentName" = 'DD';
SELECT * FROM "students" WHERE "studentId" > 4 AND "studentId" < 10;
SELECT * FROM "students" WHERE "courseId" IN (1,5);

UPDATE "students" SET "studentName" = 'John Doe' WHERE "studentId" = 1;
SELECT * FROM "students" WHERE "studentId" = 1;

UPDATE "students" SET "studentName" = 'II' WHERE "studentPhone" = 90009;

DELETE FROM "students" WHERE "studentName" = 'John Doe';


CREATE TABLE IF NOT EXISTS "accounts"(
"id" INT GENERATED BY DEFAULT AS IDENTITY,
"name" VARCHAR(120) NOT NULL,
"balance" DEC(15,2) NOT NULL,
PRIMARY KEY ("id")	
);

SELECT * FROM "accounts";

INSERT INTO "accounts"("name","balance")
VALUES ('Bob', 10000);

BEGIN;

INSERT INTO "accounts"("name", "balance")
VALUES ('Alice', 10000);

COMMIT;
ROLLBACK;

BEGIN;
UPDATE "accounts"
SET "balance" = "balance" - 1000
WHERE "id" = 1;

UPDATE "accounts"
SET "balance" = "balance" + 1000
WHERE "id" = 2;

COMMIT;

EXPLAIN ANALYZE
SELECT "studentId", "courseId", "studentName", "studentEmail", "studentPhone" 
FROM "students"
WHERE "studentPhone" IS NULL;

SELECT COUNT("studentId") AS "totalStudents", "courseId" FROM "students" 
WHERE "studentPhone" IS NOT NULL 
GROUP BY "courseId" 
ORDER BY "courseId";

-- Get a list of all the courseIds for every course that students are taking:
SELECT DISTINCT "courseId" 
FROM "students" 
ORDER BY "courseId";

-- Get a list of all the names of courses
SELECT DISTINCT st."courseId", co."courseName" 
FROM "students" AS st 
INNER JOIN "courses" AS co 
ON st."courseId" = co."courseId" ORDER BY st."courseId";

INSERT INTO "courses"("courseName")
VALUES ('DevOps'),
('UI/UX Design'),
('Product Management');

UPDATE "students"
SET "courseId" = 4
WHERE "studentId" = 8;


SELECT * FROM "students";

UPDATE "students"
SET "courseId" = 2
WHERE "studentName" = 'II';

SELECT st."studentEmail", cs."courseName"
FROM "students" AS st
INNER JOIN "courses" AS cs
ON st."courseId" = cs."courseId";


DROP TRIGGER IF EXISTS "auditTrigger"
ON "studentAudit" CASCADE;

CREATE OR REPLACE PROCEDURE insertStudent ("_courseId" INTEGER, 
"_studentName" VARCHAR, "_studentEmail" VARCHAR, "_studentPhone" INTEGER)
LANGUAGE plpgsql
AS $$
BEGIN
	 INSERT INTO "students"("courseId","studentName","studentEmail","studentPhone")
	 VALUES ("_courseId", "_studentName", "_studentEmail", "_studentPhone");
 END;
$$;

CALL insertStudent(3, 'John Legend', 'jl@gmail.com', 911);




